package heaps;

class heap {

    Eleman[] dizi;
    int N;
    int adet;

    public heap(int N) {
        dizi = new Eleman[N];
        this.N = N;
        adet = 0;
    }

    boolean bosMu() {
        return adet == 0;
    }

    boolean doluMu() {
        return adet == N;
    }

    void ekle(Eleman yeni) {
        adet++;
        dizi[adet - 1] = yeni;
        yukariCik(adet - 1);

    }

    void yukariCik(int no) {
        int ustdal = (no - 1) / 2;
        while (ustdal >= 0 && dizi[ustdal].sayi < dizi[no].sayi) {
            Eleman ara = dizi[ustdal];
            dizi[ustdal] = dizi[no];
            dizi[no] = ara;
            no = ustdal;
            ustdal = (no - 1) / 2;
        }
    }

    void heapGoster() {
        for (int i = 0; i < adet; i++) {
            System.out.print(dizi[i].sayi + " ");
        }
    }

    Eleman azamiDondur() {
        Eleman tmp = dizi[0];
        dizi[0] = dizi[adet - 1];
        asagiIn(0);
        adet--;
        return tmp;
    }

    void asagiIn(int no) {
        int sol = 2 * no + 1;
        int sag = 2 * no + 2;

        while ((sol < adet && dizi[no].sayi < dizi[sol].sayi) || (sag < adet && dizi[no].sayi < dizi[sag].sayi)) {
          int maxIndex=no;
            if (sag < adet && dizi[sol].sayi > dizi[maxIndex].sayi) {
                maxIndex=sol;
            }
            if (sag< adet && dizi[sag].sayi> dizi[maxIndex].sayi) {
                maxIndex=sag;
            }
            if (sag < adet && dizi[sag].sayi > dizi[maxIndex].sayi) {
                maxIndex=sag;
            }
            if (maxIndex != no) {
               Eleman temp=dizi[no];
               dizi[no]=dizi[maxIndex];
               dizi[maxIndex]=temp;
               no=maxIndex;
                sol = 2 * no + 1;
                sag = 2 * no + 2;
            }else{
                break;
            }
           

        }
    }

}
package heaps;

public class Eleman {

    int sayi;

    public Eleman(int sayi) {
        this.sayi = sayi;
    }

    static boolean heapMi(int[] d, int n) {
        for (int i = 0; i <= (n - 2) / 2; i++) {
            if (d[2 * i + 1] > d[i]) {
                return false;
            }
            if (2 * i + 2 < n && d[2 * i + 2] > d[i]) {
                return false;
            }
        }
        return true;
    }

    static int[] heapsort(int[] d) {
        int[] s = new int[d.length];
        heap h = new heap(d.length);
        for (int i = 0; i < s.length; i++) {
            h.ekle(new Eleman(d[i]));
        }
        h.heapGoster();
        System.out.println(" ");
        for (int i = 0; i < s.length; i++) {
            s[i] = h.azamiDondur().sayi;
        }
        return s;
    }

    public static void main(String[] args) {
        heap h = new heap(20);
        h.ekle(new Eleman(3));
        h.ekle(new Eleman(2));
        h.ekle(new Eleman(1));
        h.ekle(new Eleman(15));
        h.ekle(new Eleman(4));
        h.ekle(new Eleman(45));
        h.heapGoster();
        
        int[] dizi = {90, 15, 10, 7, 12, 2, 7, 3};
        int n = dizi.length;
        if (heapMi(dizi, n)) {
            System.out.println("bu dizi heaptir");
        } else {
            System.out.println("bu dizi heap deÄŸildir");
        }
        int[] d = {15, 23, 44, 55, 67, 48, 32, 95, 2, 8};
        int[] s = heapsort(d);
        for (int i = 0; i < 10; i++) {
            System.out.print(s[i] + " ");
        }
        /* {90,15,10,7,12,2,7,3
           90
        15     10
      7   12  2  7
         */

 /*95 67 55 48 44 23 32 15 8 2
            95
         67    55
      48  44  23  32
    15  8 2
         */
    }

}
