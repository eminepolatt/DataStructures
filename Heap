
package fınalhazırlık;
public class heap {
    private int[] Heap;
    private int size;
    private int maxSize;
    heap(int maxSize){
        this.Heap = new int[maxSize+1];
        this.size = 0;
        this.maxSize = maxSize;
        this.Heap[0] = Integer.MAX_VALUE;
    }

    private int ebeveyn(int pos){
        return pos/2;
    }

    private int solCocuk(int pos){
        return (pos*2)+1;
    }

    private int sagCocuk(int pos){
        return (pos*2)+2;
    }

    private boolean yaprakMi(int pos){
        if (pos>=(size/2) && pos<= size){
            return true;
        }
        return false;
    }

    private void takas(int ilkindis,int ikinciindis){
        int gecici = Heap[ilkindis];
        Heap[ilkindis] = Heap[ikinciindis];
        Heap[ikinciindis] = gecici;
    }

    private void maksimumMu(int pos){
        if (yaprakMi(pos))
            return;
        if (Heap[pos] < Heap[solCocuk(pos)] || Heap[pos] < Heap[sagCocuk(pos)]) {

            if (Heap[solCocuk(pos)] > Heap[sagCocuk(pos)]) {
                takas(pos, solCocuk(pos));
                maksimumMu(solCocuk(pos));
            } else {
                takas(pos, sagCocuk(pos));
                maksimumMu(solCocuk(pos));
            }
        }

    }
    public void ekle(int eleman) {
        Heap[++size] = eleman;
        int mevcut = size;
        while (Heap[mevcut] > Heap[ebeveyn(mevcut)]) {
            takas(mevcut, ebeveyn(mevcut));
            mevcut = ebeveyn(mevcut);
        }
    }
    public void yazdir() {
        for (int i = 0; i <= size / 2; i++) {
            System.out.println("ebeveyn: " + Heap[i] + "solcocuk" + Heap[2 * i] + "sagcocuk" + Heap[2 * i + 1]);
            System.out.println();
        }

    }

    public int cikarMaks() {
        int cikarilan = Heap[1];
        Heap[1] = Heap[size--];
        maksimumMu(1);
        return cikarilan;
    }

    public static void main(String[] args) {
        System.out.println("en buyuk deger");
        heap maxheap=new heap(15);
        maxheap.ekle(5);
        maxheap.ekle(3);
        maxheap.ekle(17);
        maxheap.ekle(10);
        maxheap.ekle(84);
        maxheap.ekle(19);
        maxheap.ekle(6);
        maxheap.ekle(22);
        maxheap.ekle(9);
        maxheap.yazdir();
        System.out.println("maksimum çıkarılcak"+maxheap.cikarMaks());
        maxheap.yazdir();
    }
}
